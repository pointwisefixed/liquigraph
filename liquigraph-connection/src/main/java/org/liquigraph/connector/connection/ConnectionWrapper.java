/**
 * Copyright 2014-2016 the original author or authors.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.liquigraph.connector.connection;

import org.liquigraph.connector.connectionctio.ClobWrapper;

import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public interface ConnectionWrapper extends AutoCloseable{
    StatementWrapper createStatement() throws Exception;

    void commit(TransactionWrapper wrapper) throws Exception;

    void commit() throws Exception;

    PreparedStatementWrapper prepareStatement(String changesetUpsert) throws Exception;

    void close() throws Exception;

    NClobWrapper createNClob() throws Exception;

    Map<String, Class<?>> getTypeMap() throws Exception;

    void setHoldability(int holdability) throws Exception;

    void releaseSavepoint(SavepointWrapper savepoint) throws Exception;

    ArrayWrapper createArrayOf(String typeName, Object[] elements) throws Exception;

    void rollback(SavepointWrapper savepoint) throws Exception;

    StructWrapper createStruct(String typeName, Object[] attributes) throws Exception;

    void setAutoCommit(boolean autoCommit) throws Exception;

    void setReadOnly(boolean readOnly) throws Exception;

    Properties getClientInfo() throws Exception;

    void setTransactionIsolation(int level) throws Exception;

    void setTypeMap(Map<String, Class<?>> map) throws Exception;

    void setClientInfo(String name, String value) throws Exception;

    boolean isClosed() throws Exception;

    boolean isReadOnly() throws Exception;

    SavepointWrapper setSavepoint(String name) throws Exception;

    int getNetworkTimeout() throws Exception;

    String getSchema() throws Exception;

    String getCatalog() throws Exception;

    void setCatalog(String catalog) throws Exception;

    boolean isWrapperFor(Class<?> iface) throws Exception;

    StatementWrapper createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
        throws Exception;

    void abort(Executor executor) throws Exception;

    DatabaseMetaDataWrapper getMetaData() throws Exception;

    XmlWrapper createXML() throws Exception;

    void setSchema(String schema) throws Exception;

    void clearWarnings() throws Exception;

    CallableStatementWrapper prepareCall(String sql) throws Exception;

    int getTransactionIsolation() throws Exception;

    PreparedStatementWrapper prepareStatement(String sql, int[] columnIndexes) throws Exception;

    PreparedStatementWrapper prepareStatement(String sql, String[] columnNames) throws Exception;

    BlobWrapper createBlob() throws Exception;

    boolean isValid(int timeout) throws Exception;

    void setNetworkTimeout(Executor executor, int milliseconds) throws Exception;

    WarningWrapper getWarnings() throws Exception;

    boolean getAutoCommit() throws Exception;

    ClobWrapper createClob() throws Exception;

    <T> T unwrap(Class<T> iface) throws Exception;

    int getHoldability() throws Exception;

    String nativeSQL(String sql) throws Exception;

    StatementWrapper createStatement(int resultSetType, int resultSetConcurrency) throws Exception;

    PreparedStatementWrapper prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws Exception;

    void setClientInfo(Properties properties) throws Exception;

    CallableStatementWrapper prepareCall(String sql, int resultSetType, int resultSetConcurrency,
        int resultSetHoldability) throws Exception;

    PreparedStatementWrapper prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
        int resultSetHoldability) throws Exception;

    CallableStatementWrapper prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws Exception;

    PreparedStatementWrapper prepareStatement(String sql, int autoGeneratedKeys) throws Exception;
}
